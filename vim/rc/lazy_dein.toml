[[plugins]]
repo = 'Shougo/neocomplete.vim'
on_i = 1
hook_source = '''
	"Note: This option must be set in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
	" Disable AutoComplPop.
	let g:acp_enableAtStartup = 0
	" Use neocomplete.
	let g:neocomplete#enable_at_startup = 1
	" Use smartcase.
	let g:neocomplete#enable_smart_case = 1
	" Set minimum syntax keyword length.
	let g:neocomplete#sources#syntax#min_keyword_length = 3

	" Define dictionary.
	let g:neocomplete#sources#dictionary#dictionaries = {
				\ 'default' : '',
				\ 'vimshell' : $HOME.'/.vimshell_hist',
				\ 'scheme' : $HOME.'/.gosh_completions'
				\ }

	" Define keyword.
	if !exists('g:neocomplete#keyword_patterns')
		let g:neocomplete#keyword_patterns = {}
	endif
	let g:neocomplete#keyword_patterns['default'] = '\h\w*'

	" Plugin key-mappings.
	inoremap <expr><C-g>     neocomplete#undo_completion()
	inoremap <expr><C-l>     neocomplete#complete_common_string()

	" Recommended key-mappings.
	" <CR>: close popup and save indent.
	inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
	function! s:my_cr_function()
		return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
		" For no inserting <CR> key.
		"return pumvisible() ? "\<C-y>" : "\<CR>"
	endfunction
	" <TAB>: completion.
	inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
	" <C-h>, <BS>: close popup and delete backword char.
	inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
	inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
	" Close popup by <Space>.
	"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

	" AutoComplPop like behavior.
	"let g:neocomplete#enable_auto_select = 1

	" Shell like behavior(not recommended).
	"set completeopt+=longest
	"let g:neocomplete#enable_auto_select = 1
	"let g:neocomplete#disable_auto_complete = 1
	"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

	" Enable omni completion.
	autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
	autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
	autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
	autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
	autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

	" Enable heavy omni completion.
	if !exists('g:neocomplete#sources#omni#input_patterns')
		let g:neocomplete#sources#omni#input_patterns = {}
	endif
	"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
	let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
	let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

	" For perlomni.vim setting.
	" https://github.com/c9s/perlomni.vim
	let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
	let g:neocomplete#sources#omni#input_patterns.cs = '.*[^=\);]'
'''

[[plugins]]
repo = 'justmao945/vim-clang'
on_ft = 'cpp'
hook_source = '''
	autocmd FileType cpp setlocal completeopt-=preview
	let g:clang_cpp_options = '-std=c++11 -stdlib=libc++'
	let g:clang_enable_format_command = 0
'''

[[plugins]]
repo = 'rhysd/vim-clang-format'
on_ft = 'cpp'
hook_source = '''
	let g:clang_format#code_style = 'chromium'
	let g:clang_format#style_options = {
		\ "NamespaceIndentation": "All",
		\ "Standard": "C++11" }
	let g:clang_format#auto_format = 1
'''

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
hook_source = '''
	autocmd FileType python setlocal completeopt-=preview
'''

[[plugins]]
repo = 'OmniSharp/omnisharp-vim'
on_ft = 'cs'
hook_post_update = '''
	if dein#util#_is_windows()
		let cmd = 'msbuild server/OmniSharp.sln'
	else
		let cmd = 'xbuild server/OmniSharp.sln'
	endif
	let g:dein#plugin.build = cmd
'''
hook_source = '''
	" OmniSharp won't work without this setting
	filetype plugin on

	"This is the default value, setting it isn't actually necessary
	let g:OmniSharp_host = "http://localhost:2000"

	"Set the type lookup function to use the preview window instead of the status line
	"let g:OmniSharp_typeLookupInPreview = 1

	"Timeout in seconds to wait for a response from the server
	let g:OmniSharp_timeout = 1

	"Showmatch significantly slows down omnicomplete
	"when the first match contains parentheses.
	set noshowmatch

	"Super tab settings - uncomment the next 4 lines
	"let g:SuperTabDefaultCompletionType = 'context'
	"let g:SuperTabContextDefaultCompletionType = "<c-x><c-o>"
	"let g:SuperTabDefaultCompletionTypeDiscovery = ["&omnifunc:<c-x><c-o>","&completefunc:<c-x><c-n>"]
	"let g:SuperTabClosePreviewOnPopupClose = 1

	"don't autoselect first item in omnicomplete, show if only one item (for preview)
	"remove preview if you don't want to see any documentation whatsoever.
	set completeopt=longest,menuone,preview
	" Fetch full documentation during omnicomplete requests.
	" There is a performance penalty with this (especially on Mono)
	" By default, only Type/Method signatures are fetched. Full documentation can still be fetched when
	" you need it with the :OmniSharpDocumentation command.
	" let g:omnicomplete_fetch_documentation=1

	"Move the preview window (code documentation) to the bottom of the screen, so it doesn't move the code!
	"You might also want to look at the echodoc plugin
	set splitbelow

	" Get Code Issues and syntax errors
	let g:syntastic_cs_checkers = ['syntax', 'semantic', 'issues']
	" If you are using the omnisharp-roslyn backend, use the following
	" let g:syntastic_cs_checkers = ['code_checker']
	augroup omnisharp_commands
		autocmd!

		"Set autocomplete function to OmniSharp (if not using YouCompleteMe completion plugin)
		autocmd FileType cs setlocal omnifunc=OmniSharp#Complete

		" Synchronous build (blocks Vim)
		"autocmd FileType cs nnoremap <F5> :wa!<cr>:OmniSharpBuild<cr>
		" Builds can also run asynchronously with vim-dispatch installed
		autocmd FileType cs nnoremap <leader>b :wa!<cr>:OmniSharpBuildAsync<cr>
		" automatic syntax check on events (TextChanged requires Vim 7.4)
		"autocmd BufEnter,TextChanged,InsertLeave *.cs SyntasticCheck

		" Automatically add new cs files to the nearest project on save
		autocmd BufWritePost *.cs call OmniSharp#AddToProject()

		"show type information automatically when the cursor stops moving
		autocmd CursorHold *.cs call OmniSharp#TypeLookupWithoutDocumentation()

		"The following commands are contextual, based on the current cursor position.

		autocmd FileType cs nnoremap gd :OmniSharpGotoDefinition<cr>
		autocmd FileType cs nnoremap <leader>fi :OmniSharpFindImplementations<cr>
		autocmd FileType cs nnoremap <leader>ft :OmniSharpFindType<cr>
		autocmd FileType cs nnoremap <leader>fs :OmniSharpFindSymbol<cr>
		autocmd FileType cs nnoremap <leader>fu :OmniSharpFindUsages<cr>
		"finds members in the current buffer
		autocmd FileType cs nnoremap <leader>fm :OmniSharpFindMembers<cr>
		" cursor can be anywhere on the line containing an issue
		autocmd FileType cs nnoremap <leader>x  :OmniSharpFixIssue<cr>
		autocmd FileType cs nnoremap <leader>fx :OmniSharpFixUsings<cr>
		autocmd FileType cs nnoremap <leader>tt :OmniSharpTypeLookup<cr>
		autocmd FileType cs nnoremap <leader>dc :OmniSharpDocumentation<cr>
		"navigate up by method/property/field
		autocmd FileType cs nnoremap <C-K> :OmniSharpNavigateUp<cr>
		"navigate down by method/property/field
		autocmd FileType cs nnoremap <C-J> :OmniSharpNavigateDown<cr>

	augroup END


	" this setting controls how long to wait (in ms) before fetching type / symbol information.
	set updatetime=500
	" Remove 'Press Enter to continue' message when type information is longer than one line.
	set cmdheight=2

	" Contextual code actions (requires CtrlP or unite.vim)
	nnoremap <leader><space> :OmniSharpGetCodeActions<cr>
	" Run code actions with text selected in visual mode to extract method
	vnoremap <leader><space> :call OmniSharp#GetCodeActions('visual')<cr>

	" rename with dialog
	nnoremap <leader>nm :OmniSharpRename<cr>
	nnoremap <F2> :OmniSharpRename<cr>
	" rename without dialog - with cursor on the symbol to rename... ':Rename newname'
	command! -nargs=1 Rename :call OmniSharp#RenameTo("<args>")

	" Force OmniSharp to reload the solution. Useful when switching branches etc.
	nnoremap <leader>rl :OmniSharpReloadSolution<cr>
	nnoremap <leader>cf :OmniSharpCodeFormat<cr>
	" Load the current .cs file to the nearest project
	nnoremap <leader>tp :OmniSharpAddToProject<cr>

	" (Experimental - uses vim-dispatch or vimproc plugin) - Start the omnisharp server for the current solution
	nnoremap <leader>ss :OmniSharpStartServer<cr>
	nnoremap <leader>sp :OmniSharpStopServer<cr>

	" Add syntax highlighting for types and interfaces
	nnoremap <leader>th :OmniSharpHighlightTypes<cr>
	"Don't ask to save when changing buffers (i.e. when jumping to a type definition)
	set hidden

	" Enable snippet completion, requires completeopt-=preview
	"let g:OmniSharp_want_snippet = 1
'''
